{"version":3,"file":"viselect.cjs.js","sources":["../../vanilla/src/utils/css.ts","../../vanilla/src/utils/events.ts","../../vanilla/src/utils/intersects.ts","../../vanilla/src/utils/removeElement.ts","../../vanilla/src/utils/selectAll.ts","../../vanilla/src/utils/constants.ts","../../vanilla/src/utils/deep-assign.ts","../../vanilla/src/index.ts","../../vanilla/src/EventEmitter.ts","../src/SelectionArea.vue","../src/SelectionArea.vue?vue&type=template&id=a2740ee0&lang.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type {Properties} from 'csstype';\r\n\r\nconst unitify = (val: string | number, unit = 'px'): string => {\r\n    return typeof val === 'number' ? val + unit : val;\r\n};\r\n\r\n/**\r\n * Add css to a DOM-Element or returns the current\r\n * value of a property.\r\n *\r\n * @param el The Element.\r\n * @param attr The attribute or a object which holds css key-properties.\r\n * @param val The value for a single attribute.\r\n * @returns {*}\r\n */\r\nexport function css(\r\n    {style}: HTMLElement,\r\n    attr: Partial<Record<keyof Properties, string | number>> | keyof Properties,\r\n    val?: string | number\r\n): void {\r\n    if (typeof attr === 'object') {\r\n\r\n        for (const [key, value] of Object.entries(attr)) {\r\n            style[key as any] = unitify(value as string | number);\r\n        }\r\n\r\n    } else if (val !== undefined) {\r\n        style[attr as any] = unitify(val);\r\n    }\r\n}\r\n\r\n\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\ntype Method = 'addEventListener' | 'removeEventListener';\r\ntype AnyFunction = (...arg: any) => any;\r\n\r\nexport type EventBindingArgs = [\r\n        EventTarget | Array<EventTarget>,\r\n        string | Array<string>,\r\n    AnyFunction,\r\n    Record<string, unknown>?\r\n];\r\n\r\ninterface EventBinding {\r\n    (\r\n        elements: EventTarget | Array<EventTarget>,\r\n        events: string | Array<string>,\r\n        fn: AnyFunction,\r\n        options?: Record<string, unknown>\r\n    ): EventBindingArgs;\r\n}\r\n\r\n/* eslint-disable prefer-rest-params */\r\nfunction eventListener(method: Method): EventBinding {\r\n    return (\r\n        items: EventTarget | Array<EventTarget>,\r\n        events: string | Array<string>,\r\n        fn: AnyFunction, options = {}\r\n    ): EventBindingArgs => {\r\n\r\n        // Normalize array\r\n        if (items instanceof HTMLCollection || items instanceof NodeList) {\r\n            items = Array.from(items);\r\n        } else if (!Array.isArray(items)) {\r\n            items = [items];\r\n        }\r\n\r\n        if (!Array.isArray(events)) {\r\n            events = [events];\r\n        }\r\n\r\n        for (const el of items) {\r\n            for (const ev of events) {\r\n                el[method](ev, fn as EventListener, {capture: false, ...options});\r\n            }\r\n        }\r\n\r\n        return [items, events, fn, options];\r\n    };\r\n}\r\n\r\n/**\r\n * Add event(s) to element(s).\r\n * @param elements DOM-Elements\r\n * @param events Event names\r\n * @param fn Callback\r\n * @param options Optional options\r\n * @return Array passed arguments\r\n */\r\nexport const on = eventListener('addEventListener');\r\n\r\n/**\r\n * Remove event(s) from element(s).\r\n * @param elements DOM-Elements\r\n * @param events Event names\r\n * @param fn Callback\r\n * @param options Optional options\r\n * @return Array passed arguments\r\n */\r\nexport const off = eventListener('removeEventListener');\r\n\r\n/**\r\n * Simplifies a touch / mouse-event\r\n * @param evt\r\n */\r\nexport const simplifyEvent = (evt: any): {\r\n    tap: MouseEvent | Touch;\r\n    x: number;\r\n    y: number;\r\n    target: HTMLElement;\r\n} => {\r\n    const tap = (evt.touches && evt.touches[0] || evt);\r\n    return {\r\n        tap,\r\n        x: tap.clientX,\r\n        y: tap.clientY,\r\n        target: tap.target\r\n    };\r\n};\r\n\r\n/**\r\n * Polyfill for safari & firefox for the eventPath event property.\r\n * @param evt The event object.\r\n * @return [String] event path.\r\n */\r\nexport function eventPath(evt: any): Array<EventTarget> {\r\n    let path: Array<EventTarget> = evt.path || (evt.composedPath && evt.composedPath());\r\n    if (path) {\r\n        return path;\r\n    }\r\n\r\n    let el = evt.target.parentElement;\r\n    path = [evt.target, el];\r\n\r\n    /* eslint-disable no-cond-assign */\r\n    while (el = el.parentElement) {\r\n        path.push(el);\r\n    }\r\n\r\n    path.push(document, window);\r\n    return path;\r\n}\r\n\r\n","export type Intersection = 'center' | 'cover' | 'touch'\r\n\r\n/**\r\n * Check if two DOM-Elements intersects each other.\r\n * @param a BoundingClientRect of the first element.\r\n * @param b BoundingClientRect of the second element.\r\n * @param mode Options are center, cover or touch.\r\n * @returns {boolean} If both elements intersects each other.\r\n */\r\nexport function intersects(a: DOMRect, b: DOMRect, mode: Intersection = 'touch'): boolean {\r\n    switch (mode) {\r\n        case 'center': {\r\n            const bxc = b.left + b.width / 2;\r\n            const byc = b.top + b.height / 2;\r\n\r\n            return bxc >= a.left &&\r\n                bxc <= a.right &&\r\n                byc >= a.top &&\r\n                byc <= a.bottom;\r\n        }\r\n        case 'cover': {\r\n            return b.left >= a.left &&\r\n                b.top >= a.top &&\r\n                b.right <= a.right &&\r\n                b.bottom <= a.bottom;\r\n        }\r\n        case 'touch': {\r\n            return a.right >= b.left &&\r\n                a.left <= b.right &&\r\n                a.bottom >= b.top &&\r\n                a.top <= b.bottom;\r\n        }\r\n        default: {\r\n            throw new Error(`Unkown intersection mode: ${mode}`);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Removes an element from an Array.\r\n */\r\nexport function removeElement<T>(arr: T[], el: T): void {\r\n    const index = arr.indexOf(el);\r\n\r\n    if (~index) {\r\n        arr.splice(index, 1);\r\n    }\r\n}\r\n","export type SelectAllSelectors = readonly (string | Element)[] | string | Element;\r\n\r\n/**\r\n * Takes a selector (or array of selectors) and returns the matched nodes.\r\n * @param selector The selector or an Array of selectors.\r\n * @param doc\r\n * @returns {Array} Array of DOM-Nodes.\r\n */\r\nexport function selectAll(selector: SelectAllSelectors, doc: Document = document): Array<Element> {\r\n    const list = !Array.isArray(selector) ? [selector] : selector;\r\n\r\n    const nodes = [];\r\n    for (let i = 0, l = list.length; i < l; i++) {\r\n        const item = list[i];\r\n\r\n        if (typeof item === 'string') {\r\n            nodes.push(...Array.from(doc.querySelectorAll(item)));\r\n        } else if (item instanceof HTMLElement) {\r\n            nodes.push(item);\r\n        }\r\n    }\r\n\r\n    return nodes;\r\n}\r\n","// Determines if the device's primary input supports touch\r\n// See this article: https://css-tricks.com/touch-devices-not-judged-size/\r\nexport const isTouchDevice = (): boolean => window.matchMedia('(hover: none), (pointer: coarse)').matches;\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nexport const deepAssign = <O>(target: O, source: any): O => {\r\n    for (const [key, value] of Object.entries(target)) {\r\n        const sourceValue = source[key];\r\n\r\n        // Use the default value if there's no value specified\r\n        target[key as keyof O] = sourceValue === undefined ? target[key as keyof O] :\r\n\r\n            // Check if it's a nested object and merge if required\r\n            (typeof sourceValue === 'object' && typeof value === 'object' && value !== null && !Array.isArray(value)) ?\r\n                deepAssign(value as O, sourceValue as Partial<O>) : sourceValue;\r\n    }\r\n\r\n    return target;\r\n};\r\n","import {EventTarget} from './EventEmitter';\r\nimport type {AreaLocation, Coordinates, ScrollEvent, SelectionEvents, SelectionOptions, SelectionStore} from './types';\r\nimport {PartialSelectionOptions} from './types';\r\nimport {css, deepAssign, eventPath, intersects, isTouchDevice, off, on, removeElement, selectAll, SelectAllSelectors, simplifyEvent} from './utils';\r\n\r\n// Re-export types\r\nexport * from './types';\r\n\r\n// Some var shorting for better compression and readability\r\nconst {abs, max, min, ceil} = Math;\r\n\r\nexport default class SelectionArea extends EventTarget<SelectionEvents> {\r\n    public static version = VERSION;\r\n\r\n    // Options\r\n    private readonly _options: SelectionOptions;\r\n\r\n    // Selection store\r\n    private _selection: SelectionStore = {\r\n        touched: [],\r\n        stored: [],\r\n        selected: [],\r\n        changed: {\r\n            added: [], // Added elements since last selection\r\n            removed: [] // Removed elements since last selection\r\n        }\r\n    };\r\n\r\n    // Area element and clipping element\r\n    private readonly _area: HTMLElement;\r\n    private readonly _clippingElement: HTMLElement;\r\n\r\n    // Target container (element) and boundary (cached)\r\n    private _targetElement?: Element;\r\n    private _targetRect?: DOMRect;\r\n    private _selectables: Array<Element> = [];\r\n\r\n    // Caches the position of the selection-area\r\n    private readonly _areaRect = new DOMRect();\r\n\r\n    // Dynamically constructed area rect\r\n    private _areaLocation: AreaLocation = {y1: 0, x2: 0, y2: 0, x1: 0};\r\n\r\n    // If a single click is being performed.\r\n    // It's a single-click until the user dragged the mouse.\r\n    private _singleClick = true;\r\n\r\n    // Is getting set on movement. Varied.\r\n    private _scrollAvailable = true;\r\n    private _scrollSpeed: Coordinates = {x: 0, y: 0};\r\n    private _scrollDelta: Coordinates = {x: 0, y: 0};\r\n\r\n    constructor(opt: PartialSelectionOptions) {\r\n        super();\r\n\r\n        this._options = deepAssign<SelectionOptions>({\r\n            selectionAreaClass: 'selection-area',\r\n            selectionContainerClass: undefined,\r\n            selectables: [],\r\n            document: window.document,\r\n\r\n            behaviour: {\r\n                overlap: 'invert',\r\n                intersect: 'touch',\r\n                startThreshold: {x: 10, y: 10},\r\n                scrolling: {\r\n                    speedDivider: 10,\r\n                    manualSpeed: 750\r\n                }\r\n            },\r\n\r\n            features: {\r\n                range: true,\r\n                touch: true,\r\n                singleTap: {\r\n                    allow: true,\r\n                    intersect: 'native'\r\n                }\r\n            },\r\n\r\n            startAreas: ['html'],\r\n            boundaries: ['html'],\r\n            container: 'body'\r\n        }, opt);\r\n\r\n        // Bind locale functions to instance\r\n        /* eslint-disable @typescript-eslint/no-explicit-any */\r\n        for (const key of Object.getOwnPropertyNames(Object.getPrototypeOf(this))) {\r\n            if (typeof (this as any)[key] === 'function') {\r\n                (this as any)[key] = (this as any)[key].bind(this);\r\n            }\r\n        }\r\n\r\n        const {document, selectionAreaClass, selectionContainerClass} = this._options;\r\n        this._area = document.createElement('div');\r\n        this._clippingElement = document.createElement('div');\r\n        this._clippingElement.appendChild(this._area);\r\n\r\n        // Add class to the area element\r\n        this._area.classList.add(selectionAreaClass);\r\n        selectionContainerClass && this._clippingElement.classList.add(selectionContainerClass);\r\n\r\n        // Apply basic styles to the area element\r\n        css(this._area, {\r\n            willChange: 'top, left, bottom, right, width, height',\r\n            top: 0,\r\n            left: 0,\r\n            position: 'fixed'\r\n        });\r\n\r\n        css(this._clippingElement, {\r\n            overflow: 'hidden',\r\n            position: 'fixed',\r\n            transform: 'translate3d(0, 0, 0)', // https://stackoverflow.com/a/38268846\r\n            pointerEvents: 'none',\r\n            zIndex: '1'\r\n        });\r\n\r\n        this.enable();\r\n    }\r\n\r\n    _bindStartEvents(activate = true): void {\r\n        const {document, features} = this._options;\r\n        const fn = activate ? on : off;\r\n\r\n        fn(document, 'mousedown', this._onTapStart);\r\n        features.touch && fn(document, 'touchstart', this._onTapStart, {\r\n            passive: false\r\n        });\r\n    }\r\n\r\n    _onTapStart(evt: MouseEvent | TouchEvent, silent = false): void {\r\n        const {x, y, target} = simplifyEvent(evt);\r\n        const {_options} = this;\r\n        const {document} = this._options;\r\n        const targetBoundingClientRect = target.getBoundingClientRect();\r\n\r\n        // Find start-areas and boundaries\r\n        const startAreas = selectAll(_options.startAreas, _options.document);\r\n        const resolvedBoundaries = selectAll(_options.boundaries, _options.document);\r\n\r\n        // Check in which container the user currently acts\r\n        this._targetElement = resolvedBoundaries.find(el =>\r\n            intersects(el.getBoundingClientRect(), targetBoundingClientRect)\r\n        );\r\n\r\n        // Check if area starts in one of the start areas / boundaries\r\n        const evtpath = eventPath(evt);\r\n        if (!this._targetElement ||\r\n            !startAreas.find(el => evtpath.includes(el)) ||\r\n            !resolvedBoundaries.find(el => evtpath.includes(el))) {\r\n            return;\r\n        }\r\n\r\n        if (!silent && this._emitEvent('beforestart', evt) === false) {\r\n            return;\r\n        }\r\n\r\n        // Area rect\r\n        this._areaLocation = {x1: x, y1: y, x2: 0, y2: 0};\r\n\r\n        // Lock scrolling in target container\r\n        // Solution to preventing scrolling taken fr\r\n        const scrollElement = document.scrollingElement || document.body;\r\n        this._scrollDelta = {x: scrollElement.scrollLeft, y: scrollElement.scrollTop};\r\n\r\n        // To detect single-click\r\n        this._singleClick = true;\r\n        this.clearSelection(false);\r\n\r\n        // Add listener\r\n        on(document, ['touchmove', 'mousemove'], this._delayedTapMove, {passive: false});\r\n        on(document, ['mouseup', 'touchcancel', 'touchend'], this._onTapStop);\r\n        on(document, 'scroll', this._onScroll);\r\n    }\r\n\r\n    _onSingleTap(evt: MouseEvent | TouchEvent): void {\r\n        const {singleTap: {intersect}, range} = this._options.features;\r\n        const e = simplifyEvent(evt);\r\n        let target = null;\r\n\r\n        if (intersect === 'native') {\r\n            target = e.target;\r\n        } else if (intersect === 'touch') {\r\n            this.resolveSelectables();\r\n\r\n            const {x, y} = e;\r\n            target = this._selectables.find(v => {\r\n                const {right, left, top, bottom} = v.getBoundingClientRect();\r\n                return x < right && x > left && y < bottom && y > top;\r\n            });\r\n        }\r\n\r\n        if (!target) {\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * Resolve selectables again.\r\n         * If the user starded in a scrollable area they will be reduced\r\n         * to the current area. Prevent the exclusion of these if a range-selection\r\n         * gets performed.\r\n         */\r\n        this.resolveSelectables();\r\n\r\n        // Traverse dom upwards to check if target is selectable\r\n        while (!this._selectables.includes(target)) {\r\n            if (!target.parentElement) {\r\n                return;\r\n            }\r\n\r\n            target = target.parentElement;\r\n        }\r\n\r\n        // Grab current store first in case it gets resetted\r\n        const {stored} = this._selection;\r\n\r\n        // Emit event and process element\r\n        this._emitEvent('start', evt);\r\n        if (evt.shiftKey && stored.length && range) {\r\n            const reference = stored[0];\r\n\r\n            // Resolve correct range\r\n            const [preceding, following] = reference.compareDocumentPosition(target) & 4 ?\r\n                [target, reference] : [reference, target];\r\n\r\n            const rangeItems = [...this._selectables.filter(el =>\r\n                (el.compareDocumentPosition(preceding) & 4) &&\r\n                (el.compareDocumentPosition(following) & 2)\r\n            ), target, preceding, following];\r\n\r\n            this.select(rangeItems);\r\n        } else if (stored.includes(target) && (stored.length === 1 || evt.ctrlKey)) {\r\n            this.deselect(target);\r\n        } else {\r\n            this.select(target);\r\n        }\r\n\r\n        this._emitEvent('stop', evt);\r\n    }\r\n\r\n    _delayedTapMove(evt: MouseEvent | TouchEvent): void {\r\n        const {container, document, features, behaviour: {startThreshold}} = this._options;\r\n        const {x1, y1} = this._areaLocation; // Coordinates of first \"tap\"\r\n        const {x, y} = simplifyEvent(evt);\r\n\r\n        // Check pixel threshold\r\n        const thresholdType = typeof startThreshold;\r\n        if (\r\n\r\n            // Single number\r\n            (thresholdType === 'number' && abs((x + y) - (x1 + y1)) >= startThreshold) ||\r\n\r\n            // Different x and y threshold\r\n            (thresholdType === 'object' && abs(x - x1) >= (startThreshold as Coordinates).x || abs(y - y1) >= (startThreshold as Coordinates).y)\r\n        ) {\r\n            off(document, ['mousemove', 'touchmove'], this._delayedTapMove, {passive: false});\r\n            on(document, ['mousemove', 'touchmove'], this._onTapMove, {passive: false});\r\n\r\n            // Make area element visible\r\n            css(this._area, 'display', 'block');\r\n\r\n            // Apppend selection-area to the dom\r\n            selectAll(container, document)[0].appendChild(this._clippingElement);\r\n\r\n            // Now after the threshold is reached resolve all selectables\r\n            this.resolveSelectables();\r\n\r\n            // An action is recognized as single-select until the user performed a mutli-selection\r\n            this._singleClick = false;\r\n\r\n            // Just saving the boundaries of this container for later\r\n            this._targetRect = this._targetElement!.getBoundingClientRect();\r\n\r\n            // Find container and check if it's scrollable\r\n            this._scrollAvailable =\r\n                this._targetElement!.scrollHeight !== this._targetElement!.clientHeight ||\r\n                this._targetElement!.scrollWidth !== this._targetElement!.clientWidth;\r\n\r\n            if (this._scrollAvailable) {\r\n\r\n                // Detect mouse scrolling\r\n                on(document, 'wheel', this._manualScroll, {passive: false});\r\n\r\n                /**\r\n                 * The selection-area will also cover other element which are\r\n                 * out of the current scrollable parent. So find all elements\r\n                 * which are in the current scrollable element. Later these are\r\n                 * the only selectables instead of all.\r\n                 */\r\n                this._selectables = this._selectables.filter(s => this._targetElement!.contains(s));\r\n            }\r\n\r\n            // Trigger recalc and fire event\r\n            this._prepareSelectionArea();\r\n            this._emitEvent('start', evt);\r\n            this._onTapMove(evt);\r\n        }\r\n\r\n        if (features.touch && isTouchDevice()) {\r\n            evt.preventDefault(); // Prevent swipe-down refresh\r\n        }\r\n    }\r\n\r\n    _prepareSelectionArea(): void {\r\n        const {_clippingElement, _targetElement, _area} = this;\r\n        const tr = this._targetRect = _targetElement!.getBoundingClientRect();\r\n\r\n        if (this._scrollAvailable) {\r\n\r\n            /**\r\n             * To clip the area, the selection area has a parent\r\n             * which has exact the same dimensions as the scrollable elemeent.\r\n             * Now if the area exeeds these boundaries it will be cropped.\r\n             */\r\n            css(_clippingElement, {\r\n                top: tr.top,\r\n                left: tr.left,\r\n                width: tr.width,\r\n                height: tr.height\r\n            });\r\n\r\n            /**\r\n             * The area element is relative to the clipping element,\r\n             * but when this is moved or transformed we need to correct\r\n             * the positions via a negative margin.\r\n             */\r\n            css(_area, {\r\n                marginTop: -tr.top,\r\n                marginLeft: -tr.left\r\n            });\r\n        } else {\r\n\r\n            /**\r\n             * Reset margin and clipping element dimensions.\r\n             */\r\n            css(_clippingElement, {\r\n                top: 0,\r\n                left: 0,\r\n                width: '100%',\r\n                height: '100%'\r\n            });\r\n\r\n            css(_area, {\r\n                marginTop: 0,\r\n                marginLeft: 0\r\n            });\r\n        }\r\n    }\r\n\r\n    _onTapMove(evt: MouseEvent | TouchEvent): void {\r\n        const {x, y} = simplifyEvent(evt);\r\n        const {_scrollSpeed, _areaLocation, _options} = this;\r\n        const {features} = _options;\r\n        const {speedDivider} = _options.behaviour.scrolling;\r\n        const scon = this._targetElement as Element;\r\n\r\n        _areaLocation.x2 = x;\r\n        _areaLocation.y2 = y;\r\n\r\n        if (this._scrollAvailable && (_scrollSpeed.y || _scrollSpeed.x)) {\r\n            const scroll = () => {\r\n                if (!_scrollSpeed.x && !_scrollSpeed.y) {\r\n                    return;\r\n                }\r\n\r\n                /**\r\n                 * If the value exeeds the scrollable area it will\r\n                 * be set to the max / min value. So change only\r\n                 */\r\n                const {scrollTop, scrollLeft} = scon;\r\n\r\n                // Reduce velocity, use ceil in both directions to scroll at least 1px per frame\r\n                if (_scrollSpeed.y) {\r\n                    scon.scrollTop += ceil(_scrollSpeed.y / speedDivider);\r\n                    _areaLocation.y1 -= scon.scrollTop - scrollTop;\r\n                }\r\n\r\n                if (_scrollSpeed.x) {\r\n                    scon.scrollLeft += ceil(_scrollSpeed.x / speedDivider);\r\n                    _areaLocation.x1 -= scon.scrollLeft - scrollLeft;\r\n                }\r\n\r\n                /**\r\n                 * We changed the start coordinates -> redraw the selectiona area\r\n                 * We changed the dimensions of the area element -> re-calc selected elements\r\n                 * The selected elements array has been changed -> fire event\r\n                 */\r\n                this._recalculateSelectionAreaRect();\r\n                this._updateElementSelection();\r\n                this._emitEvent('move', evt);\r\n                this._redrawSelectionArea();\r\n\r\n                // Keep scrolling even if the user stops to move his pointer\r\n                requestAnimationFrame(scroll);\r\n            };\r\n\r\n            // Continous scrolling\r\n            requestAnimationFrame(scroll);\r\n        } else {\r\n\r\n            /**\r\n             * Perform redraw only if scrolling is not active.\r\n             * If scrolling is active this area is getting re-dragwed by the\r\n             * anonymized scroll function.\r\n             */\r\n            this._recalculateSelectionAreaRect();\r\n            this._updateElementSelection();\r\n            this._emitEvent('move', evt);\r\n            this._redrawSelectionArea();\r\n        }\r\n\r\n        if (features.touch && isTouchDevice()) {\r\n            evt.preventDefault(); // Prevent swipe-down refresh\r\n        }\r\n    }\r\n\r\n    _onScroll(): void {\r\n        const {_scrollDelta, _options: {document}} = this;\r\n\r\n        // Resolve scrolling offsets\r\n        const {scrollTop, scrollLeft} = document.scrollingElement || document.body;\r\n\r\n        // Adjust area start location\r\n        this._areaLocation.x1 += _scrollDelta.x - scrollLeft;\r\n        this._areaLocation.y1 += _scrollDelta.y - scrollTop;\r\n        _scrollDelta.x = scrollLeft;\r\n        _scrollDelta.y = scrollTop;\r\n\r\n        // The area needs to be resetted as the target-container has changed in its position\r\n        this._prepareSelectionArea();\r\n        this._recalculateSelectionAreaRect();\r\n        this._updateElementSelection();\r\n        this._emitEvent('move', null);\r\n        this._redrawSelectionArea();\r\n    }\r\n\r\n    _manualScroll(evt: ScrollEvent): void {\r\n        const {manualSpeed} = this._options.behaviour.scrolling;\r\n\r\n        // Consistent scrolling speed on all browsers\r\n        const deltaY = evt.deltaY ? (evt.deltaY > 0 ? 1 : -1) : 0;\r\n        const deltaX = evt.deltaX ? (evt.deltaX > 0 ? 1 : -1) : 0;\r\n        this._scrollSpeed.y += deltaY * manualSpeed;\r\n        this._scrollSpeed.x += deltaX * manualSpeed;\r\n        this._onTapMove(evt);\r\n\r\n        // Prevent defaul scrolling behaviour, eg. page scrolling\r\n        evt.preventDefault();\r\n    }\r\n\r\n    _recalculateSelectionAreaRect(): void {\r\n        const {_scrollSpeed, _areaLocation, _areaRect, _targetElement, _targetRect} = this;\r\n        const {scrollTop, scrollHeight, clientHeight, scrollLeft, scrollWidth, clientWidth} = _targetElement as Element;\r\n        const brect = _targetRect as DOMRect;\r\n        const {x1, y1} = _areaLocation;\r\n        let {x2, y2} = _areaLocation;\r\n\r\n        if (x2 < brect.left) {\r\n            _scrollSpeed.x = scrollLeft ? -abs(brect.left - x2) : 0;\r\n            x2 = brect.left;\r\n        } else if (x2 > brect.right) {\r\n            _scrollSpeed.x = scrollWidth - scrollLeft - clientWidth ? abs(brect.left + brect.width - x2) : 0;\r\n            x2 = brect.right;\r\n        } else {\r\n            _scrollSpeed.x = 0;\r\n        }\r\n\r\n        if (y2 < brect.top) {\r\n            _scrollSpeed.y = scrollTop ? -abs(brect.top - y2) : 0;\r\n            y2 = brect.top;\r\n        } else if (y2 > brect.bottom) {\r\n            _scrollSpeed.y = scrollHeight - scrollTop - clientHeight ? abs(brect.top + brect.height - y2) : 0;\r\n            y2 = brect.bottom;\r\n        } else {\r\n            _scrollSpeed.y = 0;\r\n        }\r\n\r\n        const x3 = min(x1, x2);\r\n        const y3 = min(y1, y2);\r\n        const x4 = max(x1, x2);\r\n        const y4 = max(y1, y2);\r\n\r\n        _areaRect.x = x3;\r\n        _areaRect.y = y3;\r\n        _areaRect.width = x4 - x3;\r\n        _areaRect.height = y4 - y3;\r\n    }\r\n\r\n    _redrawSelectionArea(): void {\r\n        const {x, y, width, height} = this._areaRect;\r\n        const {style} = this._area;\r\n\r\n        // Using transform will make the area's borders look blurry\r\n        style.left = `${x}px`;\r\n        style.top = `${y}px`;\r\n        style.width = `${width}px`;\r\n        style.height = `${height}px`;\r\n    }\r\n\r\n    _onTapStop(evt: MouseEvent | TouchEvent | null, silent: boolean): void {\r\n        const {document, features} = this._options;\r\n        const {_singleClick} = this;\r\n\r\n        // Remove event handlers\r\n        off(document, ['mousemove', 'touchmove'], this._delayedTapMove);\r\n        off(document, ['touchmove', 'mousemove'], this._onTapMove);\r\n        off(document, ['mouseup', 'touchcancel', 'touchend'], this._onTapStop);\r\n        off(document, 'scroll', this._onScroll);\r\n\r\n        if (evt && _singleClick && features.singleTap.allow) {\r\n            this._onSingleTap(evt);\r\n        } else if (!_singleClick && !silent) {\r\n            this._updateElementSelection();\r\n            this._emitEvent('stop', evt);\r\n        }\r\n\r\n        // Reset scroll speed\r\n        this._scrollSpeed.x = 0;\r\n        this._scrollSpeed.y = 0;\r\n\r\n        // Unbind mouse scrolling listener\r\n        this._scrollAvailable && off(document, 'wheel', this._manualScroll, {passive: true});\r\n\r\n        // Remove selection-area from dom\r\n        this._clippingElement.remove();\r\n\r\n        // Hide selection area\r\n        css(this._area, 'display', 'none');\r\n        this._keepSelection();\r\n    }\r\n\r\n    _updateElementSelection(): void {\r\n        const {_selectables, _options, _selection, _areaRect} = this;\r\n        const {stored, selected, touched} = _selection;\r\n        const {intersect, overlap} = _options.behaviour;\r\n\r\n        // Update\r\n        const newlyTouched = [];\r\n        const added = [];\r\n        const removed = [];\r\n\r\n        // Itreate over the selectable elements\r\n        for (let i = 0; i < _selectables.length; i++) {\r\n            const node = _selectables[i];\r\n\r\n            // Check if area intersects element\r\n            if (intersects(_areaRect, node.getBoundingClientRect(), intersect)) {\r\n\r\n                // Check if the element wasn't present in the last selection.\r\n                if (!selected.includes(node)) {\r\n\r\n                    // Check if user wants to invert the selection for already selected elements\r\n                    if (overlap === 'invert' && stored.includes(node)) {\r\n                        removed.push(node);\r\n                        continue;\r\n                    } else {\r\n                        added.push(node);\r\n                    }\r\n                } else if (stored.includes(node) && !touched.includes(node)) {\r\n                    touched.push(node);\r\n                }\r\n\r\n                newlyTouched.push(node);\r\n            }\r\n        }\r\n\r\n        // Re-select elements which were previously stored\r\n        if (overlap === 'invert') {\r\n            added.push(...stored.filter(v => !selected.includes(v)));\r\n        }\r\n\r\n        // Check which elements where removed since last selection\r\n        for (let i = 0; i < selected.length; i++) {\r\n            const node = selected[i];\r\n\r\n            if (!newlyTouched.includes(node) && !(\r\n\r\n                // Check if user wants to keep previously selected elements, e.g.\r\n                // not make them part of the current selection as soon as they're touched.\r\n                overlap === 'keep' && stored.includes(node)\r\n            )) {\r\n                removed.push(node);\r\n            }\r\n        }\r\n\r\n        // Save\r\n        _selection.selected = newlyTouched;\r\n        _selection.changed = {added, removed};\r\n    }\r\n\r\n    _emitEvent(name: keyof SelectionEvents, evt: MouseEvent | TouchEvent | null): unknown {\r\n        return this.emit(name, {\r\n            event: evt,\r\n            store: this._selection,\r\n            selection: this\r\n        });\r\n    }\r\n\r\n    _keepSelection(): void {\r\n        const {_options, _selection} = this;\r\n        const {selected, changed, touched, stored} = _selection;\r\n\r\n        // Newly added elements\r\n        const addedElements = selected.filter(el => !stored.includes(el));\r\n\r\n        switch (_options.behaviour.overlap) {\r\n            case 'drop': {\r\n                _selection.stored = addedElements.concat(\r\n                    // Elements not touched\r\n                    stored.filter(el => !touched.includes(el))\r\n                );\r\n                break;\r\n            }\r\n            case 'invert': {\r\n                _selection.stored = addedElements.concat(\r\n                    // Elements not removed from selection\r\n                    stored.filter(el => !changed.removed.includes(el))\r\n                );\r\n                break;\r\n            }\r\n            case 'keep': {\r\n                _selection.stored = stored.concat(\r\n                    // Newly added\r\n                    selected.filter(el => !stored.includes(el))\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Manually triggers the start of a selection\r\n     * @param evt A MouseEvent / TouchEvent -like object\r\n     * @param silent If beforestart should be fired,\r\n     */\r\n    trigger(evt: MouseEvent | TouchEvent, silent = true): void {\r\n        this._onTapStart(evt, silent);\r\n    }\r\n\r\n    /**\r\n     * Can be used if during a selection elements have been added.\r\n     * Will update everything which can be selected.\r\n     */\r\n    resolveSelectables(): void {\r\n\r\n        // Resolve selectors\r\n        this._selectables = selectAll(this._options.selectables, this._options.document);\r\n    }\r\n\r\n    /**\r\n     * Clear the elements which where saved by 'keepSelection()'.\r\n     * @param store If the store should also get cleared\r\n     */\r\n    clearSelection(store = true): void {\r\n        this._selection = {\r\n            stored: store ? [] : this._selection.stored,\r\n            selected: [],\r\n            touched: [],\r\n            changed: {\r\n                added: [],\r\n                removed: []\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @returns {Array} Selected elements\r\n     */\r\n    getSelection(): Array<Element> {\r\n        return this._selection.stored;\r\n    }\r\n\r\n    /**\r\n     * @returns {HTMLElement} The selection area element\r\n     */\r\n    getSelectionArea(): HTMLElement {\r\n        return this._area;\r\n    }\r\n\r\n    /**\r\n     * Cancel the current selection process.\r\n     * @param keepEvent {boolean} true to fire the onStop listener after cancel.\r\n     */\r\n    cancel(keepEvent = false): void {\r\n        this._onTapStop(null, !keepEvent);\r\n    }\r\n\r\n    /**\r\n     * Unbinds all events and removes the area-element.\r\n     */\r\n    destroy(): void {\r\n        this.cancel();\r\n        this.disable();\r\n        this._clippingElement.remove();\r\n        super.unbindAllListeners();\r\n    }\r\n\r\n    /**\r\n     * Disable the selection functinality.\r\n     */\r\n    /* eslint-disable no-invalid-this */\r\n    disable = this._bindStartEvents.bind(this, false);\r\n\r\n    /**\r\n     * Disable the selection functinality.\r\n     */\r\n    /* eslint-disable no-invalid-this */\r\n    enable = this._bindStartEvents;\r\n\r\n    /**\r\n     * Adds elements to the selection\r\n     * @param query - CSS Query, can be an array of queries\r\n     * @param quiet - If this should not trigger the move event\r\n     */\r\n    select(query: SelectAllSelectors, quiet = false): Array<Element> {\r\n        const {changed, selected, stored} = this._selection;\r\n        const elements = selectAll(query, this._options.document).filter(el =>\r\n            !selected.includes(el) &&\r\n            !stored.includes(el)\r\n        );\r\n\r\n        // Update stores\r\n        selected.push(...elements);\r\n        changed.added.push(...elements);\r\n\r\n        !quiet && this._emitEvent('move', null);\r\n        return elements;\r\n    }\r\n\r\n    /**\r\n     * Removes an particular element from the selection.\r\n     * @param el - Element to remove.\r\n     * @param quiet - If this should not trigger the move event\r\n     * @returns boolean - true if the element was successfully removed\r\n     */\r\n    deselect(el: Element, quiet = false): boolean {\r\n        const {selected, stored, changed} = this._selection;\r\n\r\n        if (\r\n            selected.includes(el) ||\r\n            stored.includes(el)\r\n        ) {\r\n            changed.removed.push(el);\r\n            removeElement(stored, el);\r\n            removeElement(selected, el);\r\n\r\n            // Fire event\r\n            !quiet && this._emitEvent('move', null);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\ntype AnyFunction = (...args: any[]) => any;\r\ntype EventMap = Record<string, AnyFunction>;\r\n\r\nexport class EventTarget<Events extends EventMap> {\r\n    private readonly _listeners = new Map<keyof Events, Set<AnyFunction>>();\r\n\r\n    public addEventListener<K extends keyof Events>(event: K, cb: Events[K]): this {\r\n        const set = this._listeners.get(event) || new Set();\r\n        this._listeners.set(event, set);\r\n        set.add(cb as AnyFunction);\r\n        return this;\r\n    }\r\n\r\n    public removeEventListener<K extends keyof Events>(event: K, cb: Events[K]): this {\r\n        this._listeners.get(event)?.delete(cb as AnyFunction);\r\n        return this;\r\n    }\r\n\r\n    public dispatchEvent<K extends keyof Events>(event: K, ...data: Parameters<Events[K]>): unknown {\r\n        let ok = true;\r\n        for (const cb of (this._listeners.get(event) || [])) {\r\n            ok = (cb(...data) !== false) && ok;\r\n        }\r\n\r\n        return ok;\r\n    }\r\n\r\n    public unbindAllListeners(): void {\r\n        this._listeners.clear();\r\n    }\r\n\r\n    // Let's also support on, off and emit like node\r\n    /* eslint-disable no-invalid-this */\r\n    public on = this.addEventListener;\r\n    public off = this.removeEventListener;\r\n    public emit = this.dispatchEvent;\r\n}\r\n","<template>\r\n    <div ref=\"container\">\r\n        <slot/>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport SelectionArea, {SelectionEvents} from '@vanilla/index';\r\nimport {SelectionOptions} from '@vanilla/types';\r\nimport {defineComponent, PropType} from 'vue';\r\nexport * from '@vanilla/types';\r\nexport {default as VanillaSelectionArea} from '@vanilla/index';\r\n\r\nexport default defineComponent({\r\n    props: {\r\n        onBeforeStart: {type: Function, default: undefined},\r\n        onStart: {type: Function, default: undefined},\r\n        onMove: {type: Function, default: undefined},\r\n        onStop: {type: Function, default: undefined},\r\n        options: {\r\n            type: Object as PropType<Omit<SelectionOptions, 'boundaries'>>,\r\n            default: () => ({})\r\n        }\r\n    },\r\n\r\n    setup(): {instance: SelectionArea | null} {\r\n        return {\r\n            instance: null\r\n        };\r\n    },\r\n\r\n    mounted() {\r\n        this.instance = new SelectionArea({\r\n            boundaries: this.$refs.container as HTMLDivElement,\r\n            ...this.options\r\n        });\r\n\r\n        const {onBeforeStart, onStart, onMove, onStop} = this;\r\n        onBeforeStart && this.instance.on('beforestart', onBeforeStart as SelectionEvents['beforestart']);\r\n        onStart && this.instance.on('start', onStart as SelectionEvents['start']);\r\n        onMove && this.instance.on('move', onMove as SelectionEvents['move']);\r\n        onStop && this.instance.on('stop', onStop as SelectionEvents['stop']);\r\n\r\n        // this.instance.on('beforestart', args => {\r\n        //     this.$emit('beforestart', args);\r\n        //     return true;\r\n        // });\r\n        //\r\n        // this.instance.on('start', args => this.$emit('start', args));\r\n        // this.instance.on('move', args => this.$emit('move', args));\r\n        // this.instance.on('stop', args => this.$emit('stop', args));\r\n    },\r\n\r\n    beforeUnmount() {\r\n        this.instance?.destroy();\r\n    }\r\n});\r\n\r\n</script>\r\n","<template>\r\n    <div ref=\"container\">\r\n        <slot/>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport SelectionArea, {SelectionEvents} from '@vanilla/index';\r\nimport {SelectionOptions} from '@vanilla/types';\r\nimport {defineComponent, PropType} from 'vue';\r\nexport * from '@vanilla/types';\r\nexport {default as VanillaSelectionArea} from '@vanilla/index';\r\n\r\nexport default defineComponent({\r\n    props: {\r\n        onBeforeStart: {type: Function, default: undefined},\r\n        onStart: {type: Function, default: undefined},\r\n        onMove: {type: Function, default: undefined},\r\n        onStop: {type: Function, default: undefined},\r\n        options: {\r\n            type: Object as PropType<Omit<SelectionOptions, 'boundaries'>>,\r\n            default: () => ({})\r\n        }\r\n    },\r\n\r\n    setup(): {instance: SelectionArea | null} {\r\n        return {\r\n            instance: null\r\n        };\r\n    },\r\n\r\n    mounted() {\r\n        this.instance = new SelectionArea({\r\n            boundaries: this.$refs.container as HTMLDivElement,\r\n            ...this.options\r\n        });\r\n\r\n        const {onBeforeStart, onStart, onMove, onStop} = this;\r\n        onBeforeStart && this.instance.on('beforestart', onBeforeStart as SelectionEvents['beforestart']);\r\n        onStart && this.instance.on('start', onStart as SelectionEvents['start']);\r\n        onMove && this.instance.on('move', onMove as SelectionEvents['move']);\r\n        onStop && this.instance.on('stop', onStop as SelectionEvents['stop']);\r\n\r\n        // this.instance.on('beforestart', args => {\r\n        //     this.$emit('beforestart', args);\r\n        //     return true;\r\n        // });\r\n        //\r\n        // this.instance.on('start', args => this.$emit('start', args));\r\n        // this.instance.on('move', args => this.$emit('move', args));\r\n        // this.instance.on('stop', args => this.$emit('stop', args));\r\n    },\r\n\r\n    beforeUnmount() {\r\n        this.instance?.destroy();\r\n    }\r\n});\r\n\r\n</script>\r\n"],"names":["unitify","val","unit","css","style","attr","key","value","Object","entries","undefined","eventListener","method","items","events","fn","options","HTMLCollection","NodeList","Array","from","isArray","el","ev","capture","on","off","simplifyEvent","evt","tap","touches","x","clientX","y","clientY","target","eventPath","path","composedPath","parentElement","push","document","window","intersects","a","b","mode","bxc","left","width","byc","top","height","right","bottom","Error","removeElement","arr","index","indexOf","splice","selectAll","selector","doc","list","nodes","i","l","length","item","querySelectorAll","HTMLElement","isTouchDevice","matchMedia","matches","deepAssign","source","sourceValue","abs","max","min","ceil","Math","SelectionArea","[object Object]","this","Map","addEventListener","removeEventListener","dispatchEvent","event","cb","set","_listeners","get","Set","add","delete","data","ok","clear","opt","super","touched","stored","selected","changed","added","removed","DOMRect","y1","x2","y2","x1","_bindStartEvents","bind","_options","selectionAreaClass","selectionContainerClass","selectables","behaviour","overlap","intersect","startThreshold","scrolling","speedDivider","manualSpeed","features","range","touch","singleTap","allow","startAreas","boundaries","container","getOwnPropertyNames","getPrototypeOf","_area","createElement","_clippingElement","appendChild","classList","willChange","position","overflow","transform","pointerEvents","zIndex","enable","activate","_onTapStart","passive","silent","_","targetBoundingClientRect","getBoundingClientRect","resolvedBoundaries","_targetElement","find","evtpath","includes","_emitEvent","_areaLocation","scrollElement","scrollingElement","body","_scrollDelta","scrollLeft","scrollTop","_singleClick","clearSelection","_delayedTapMove","_onTapStop","_onScroll","e","resolveSelectables","_selectables","v","_selection","shiftKey","reference","preceding","following","compareDocumentPosition","rangeItems","filter","select","ctrlKey","deselect","thresholdType","_onTapMove","_targetRect","_scrollAvailable","scrollHeight","clientHeight","scrollWidth","clientWidth","_manualScroll","s","contains","_prepareSelectionArea","preventDefault","A","L","S","tr","marginTop","marginLeft","_scrollSpeed","scon","scroll","_recalculateSelectionAreaRect","_updateElementSelection","_redrawSelectionArea","requestAnimationFrame","m","deltaY","deltaX","h","_areaRect","R","brect","x3","y3","x4","y4","u","_onSingleTap","remove","_keepSelection","o","newlyTouched","node","name","emit","store","selection","addedElements","concat","keepEvent","cancel","disable","unbindAllListeners","query","quiet","elements","defineComponent","props","onBeforeStart","type","Function","default","onStart","onMove","onStop","setup","instance","$refs","destroy","ref","_createBlock","_hoisted_1","_renderSlot"],"mappings":"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"}